**Guide: Cloning and Pushing Between GitHub and Local PC**

Cloning a repository from GitHub to your local PC and pushing changes back to the repository is a fundamental workflow in version control using Git. This guide will walk you through the process step by step.

**Prerequisites:**
1. A GitHub account (create one at https://github.com if you don't have it).
2. Git installed on your local PC (download from https://git-scm.com/downloads).

**Step 1: Clone the Repository**
1. **Repository URL:** Go to the GitHub repository you want to clone and find the green "Code" button. Click on it and copy the repository URL (HTTPS or SSH).
2. **Terminal:** Open your terminal (Command Prompt on Windows, Terminal on macOS/Linux).
3. **Navigation:** Navigate to the directory where you want to clone the repository using the `cd` command (e.g., `cd Documents`).
4. **Clone Command:** Type `git clone` followed by the copied repository URL. It should look like this:
   ```sh
   git clone https://github.com/username/repository.git
   ```
5. **Clone:** Press Enter to execute the command. Git will clone the repository into a new folder.

**Step 2: Making and Committing Changes**
1. **Navigate:** Use the `cd` command to navigate into the cloned repository's folder (e.g., `cd repository`).
2. **Edit Files:** Make changes to the files using your preferred code editor.
3. **Check Status:** To see which files have been changed, type:
   ```sh
   git status
   ```
4. **Stage Changes:** Use the `git add` command to stage the changes for commit. You can stage all changes with:
   ```sh
   git add .
   ```
   Or stage specific files with:
   ```sh
   git add file1.txt file2.js
   ```
5. **Commit Changes:** Commit the staged changes with a descriptive message:
   ```sh
   git commit -m "Add new features"
   ```

**Step 3: Pushing Changes to GitHub**
1. **Push Command:** Push the committed changes to GitHub using:
   ```sh
   git push origin main
   ```
   Replace `main` with the appropriate branch name if you're working on a different branch.

**Additional Tips:**
- **Branching:** It's a good practice to create branches for new features or bug fixes. You can create a new branch using `git checkout -b new-branch-name`.
- **Pull Requests:** After pushing changes to a branch on GitHub, you can create a Pull Request to merge your changes into the main repository. This allows for code review and collaboration.
- **Fetching Changes:** To fetch changes from the remote repository without merging, use `git fetch`.
- **Pulling Changes:** To fetch and merge changes from the remote repository, use `git pull origin main`.

By following these steps, you'll be able to clone a repository from GitHub, make changes locally, commit those changes, and push them back to GitHub. This version control workflow is essential for collaborating on projects and keeping track of changes over time.